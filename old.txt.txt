Kubernetes allows for the orchestration of microservies in a more declaraitive manner, the team defines the desired state of the application and Kubernetes will check to ensure that the microservices meet the desired requirements, be it autoscaling to meet demand or managing updates of a service in a controlled manner to ensure continuity of service to end users.
Throughout this paper,  the separation of the data access layer has not been discussed. Microservice purists would demand that each microservice has independent persistence. In the process of application modernisation, this may add extra complexity such that teams may not want to attempt to take on this extra work. It may be far simpler to migrate the existing persistence layer into the cloud and leverage a managed service that can help meet user demand. When there is a need to modernise the persistence layer, a data virtualisation layer can be implemented to allow for polyglot persistence to take place and began modernisation of the back-end layer.
The approach is not to attempt a complete re-write when modernising a monolithic application to a more loosely coupled and scalable microservices architecture; this is fraught with dangers and can lead to failure. It is, in fact, more prudent to add new features as separate services to allow the monolith to meet business requirements as well as begin the process of refactoring to a microservices based Architecture. 
